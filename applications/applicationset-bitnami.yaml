---
# ApplicationSet for Event-Driven Platform with Bitnami Kafka
# Uses Bitnami Kafka Helm chart instead of Strimzi operator
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: eventing-platform-bitnami
  namespace: argocd
  labels:
    app.kubernetes.io/name: eventing-platform
    app.kubernetes.io/component: gitops
spec:
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]

  generators:
    - list:
        elements:
          # Namespaces
          - name: namespaces
            path: infrastructure
            syncWave: "0"

          # Knative Eventing CR
          - name: knative-eventing
            path: environments/production
            file: knative-eventing-cr.yaml
            syncWave: "3"

          # Kafka Broker Config (updated for Bitnami)
          - name: kafka-broker-config
            path: environments/production
            file: kafka-broker-config-bitnami.yaml
            syncWave: "4"

          # Kafka Broker Integration
          - name: kafka-broker
            path: environments/production
            file: kafka-broker-integration.yaml
            syncWave: "5"

          # Network Policies
          - name: network-policies
            path: environments/production
            file: network-policies.yaml
            syncWave: "6"

  template:
    metadata:
      name: 'eventing-{{.name}}'
      namespace: argocd
      labels:
        app.kubernetes.io/name: '{{.name}}'
        app.kubernetes.io/component: eventing
        app.kubernetes.io/part-of: event-driven-platform
      annotations:
        argocd.argoproj.io/sync-wave: '{{.syncWave}}'
      finalizers:
        - resources-finalizer.argocd.argoproj.io

    spec:
      project: eventing

      source:
        repoURL: 'https://github.com/itufan/gitops-eventing.git'
        targetRevision: main
        path: '{{.path}}'

      destination:
        server: https://kubernetes.default.svc
        namespace: eventing

      syncPolicy:
        automated:
          prune: true
          selfHeal: true
        syncOptions:
          - CreateNamespace=true
          - ServerSideApply=true
        retry:
          limit: 5
          backoff:
            duration: 10s
            factor: 2
            maxDuration: 5m

      ignoreDifferences:
        - group: apps
          kind: StatefulSet
          jsonPointers:
            - /spec/volumeClaimTemplates
            - /spec/replicas
        - group: apps
          kind: Deployment
          jsonPointers:
            - /spec/replicas

---
# Bitnami Kafka Helm Chart Application
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: eventing-kafka-bitnami
  namespace: argocd
  labels:
    app.kubernetes.io/name: kafka-bitnami
    app.kubernetes.io/component: eventing
    app.kubernetes.io/part-of: event-driven-platform
  annotations:
    argocd.argoproj.io/sync-wave: "2"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: eventing

  source:
    repoURL: 'https://charts.bitnami.com/bitnami'
    chart: kafka
    targetRevision: 30.1.8  # Use stable version with Kafka 3.8.x
    helm:
      valuesObject:
        global:
          storageClass: "longhorn"

        # Image override - use bitnamilegacy registry
        image:
          registry: docker.io
          repository: bitnamilegacy/kafka
          tag: "3.8.1-debian-12-r0"

        # KRaft Mode Configuration (no ZooKeeper)
        kraft:
          enabled: true

        # Controller Configuration (3 replicas for HA)
        controller:
          replicaCount: 3
          resourcesPreset: "small"
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi

          # Persistence - 10GB per controller
          persistence:
            enabled: true
            storageClass: "longhorn"
            size: 10Gi
            accessModes:
              - ReadWriteOnce

          logPersistence:
            enabled: true
            storageClass: "longhorn"
            size: 5Gi
            accessModes:
              - ReadWriteOnce

          # Node Affinity - Prefer Falkenstein workers
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 100
                  preference:
                    matchExpressions:
                      - key: location
                        operator: In
                        values:
                          - falkenstein
                      - key: workload
                        operator: NotIn
                        values:
                          - gitops-observability
                - weight: 50
                  preference:
                    matchExpressions:
                      - key: location
                        operator: In
                        values:
                          - falkenstein
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchLabels:
                      app.kubernetes.io/name: kafka
                      app.kubernetes.io/component: controller-eligible
                  topologyKey: kubernetes.io/hostname

        # Broker Configuration (0 for combined mode)
        broker:
          replicaCount: 0

        # Listener Configuration - PLAINTEXT only
        listeners:
          client:
            name: CLIENT
            containerPort: 9092
            protocol: PLAINTEXT
          controller:
            name: CONTROLLER
            containerPort: 9093
            protocol: PLAINTEXT
          interbroker:
            name: INTERNAL
            containerPort: 9094
            protocol: PLAINTEXT
          external:
            containerPort: 9095
            protocol: PLAINTEXT

        # Disable external access
        externalAccess:
          enabled: false

        # Service Configuration
        service:
          type: ClusterIP
          ports:
            client: 9092

        # Kafka Configuration
        defaultReplicationFactor: 3
        offsetsTopicReplicationFactor: 3
        transactionStateLogReplicationFactor: 3
        transactionStateLogMinIsr: 2
        minInsyncReplicas: 2
        autoCreateTopicsEnable: true
        deleteTopicEnable: true
        logRetentionHours: 168
        numPartitions: 3

        # Security - Disable for cluster-internal
        auth:
          clientProtocol: plaintext
          interBrokerProtocol: plaintext
          controllerProtocol: plaintext
          sasl:
            enabledMechanisms: ""
          tls:
            enabled: false

        # Metrics and Monitoring
        metrics:
          kafka:
            enabled: false  # Disabled due to image availability issues
          jmx:
            enabled: false
          serviceMonitor:
            enabled: false

        # Health Checks
        livenessProbe:
          enabled: true
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6

        readinessProbe:
          enabled: true
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6

        # Security Context
        podSecurityContext:
          enabled: true
          fsGroup: 1001
          runAsUser: 1001
          runAsNonRoot: true

        containerSecurityContext:
          enabled: true
          runAsUser: 1001
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: true

        # Network Policies
        networkPolicy:
          enabled: true
          allowExternal: false

  destination:
    server: https://kubernetes.default.svc
    namespace: kafka

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true
    retry:
      limit: 5
      backoff:
        duration: 10s
        factor: 2
        maxDuration: 5m

---
# Knative Operator Application (external URL)
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: eventing-knative-operator
  namespace: argocd
  labels:
    app.kubernetes.io/name: knative-operator
    app.kubernetes.io/component: eventing
    app.kubernetes.io/part-of: event-driven-platform
  annotations:
    argocd.argoproj.io/sync-wave: "1"
    argocd.argoproj.io/sync-options: Replace=true
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: eventing

  source:
    repoURL: 'https://github.com/knative/operator'
    targetRevision: 'knative-v1.15.2'
    path: config

  destination:
    server: https://kubernetes.default.svc
    namespace: knative-operator

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - Replace=true
    retry:
      limit: 5
      backoff:
        duration: 10s
        factor: 2
        maxDuration: 5m

---
# Kafka Broker Controller Application
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: eventing-kafka-broker-controller
  namespace: argocd
  labels:
    app.kubernetes.io/name: kafka-broker-controller
    app.kubernetes.io/component: eventing
    app.kubernetes.io/part-of: event-driven-platform
  annotations:
    argocd.argoproj.io/sync-wave: "4"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: eventing

  source:
    repoURL: 'https://github.com/knative-extensions/eventing-kafka-broker'
    targetRevision: 'knative-v1.15.0'
    path: config/source/multi

  destination:
    server: https://kubernetes.default.svc
    namespace: knative-eventing

  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
    retry:
      limit: 5
      backoff:
        duration: 10s
        factor: 2
        maxDuration: 5m
